# TRIALS MODE ==================================================================
# Nearly all of this code thanks to Kamekaze
# Triggers and sctrl by two4teezee
#
# TRIALS MODE DEV NOTES=========================================================
# 0. Enable Trials Mode on select screen (main.lua) - DONE
# 1. Collect trials list when reading char (system.go) - DONE
# 2. Create new triggers for trials mode (char, compiler, bytecode.go) - WIP
# --> 2a. currenttrial: current trial being attempted
# --> 2b. currenttrialsteps: number of steps in current trial
# --> 2c. numberoftrials: total number of trials for this char
# 3. Create trials list parser (menu.lua) - WIP
# 4. Create pause menu for trials list + ability to select trial (menu.lua) - WIP
# 5. Create trials display elements (lifebar.go) - WIP
# 6. Create trials function that feeds display elements (trials.zss) - WIP
# SAMPLE TRIALS LIST============================================================
#
# [Trial 1 Def]
# trial.steps = 1                   ;int > 0
# trial.name = Raging Demon         ;string
#
# trial.line1.text = Raging Demon         ;string
# trial.line1.glyph = XX_F_AZ             ;same as movelist glyphs
# trial.line1.stateno = 
# trial.line1.anim =
#
# [Trial 2 Def]
# trial.steps = 3                                   ;int > 0
# trial.name = Standard Issue Shoto Three Piece     ;string
#
# trial.line1.text = Jumping Roundhouse             ;string
# trial.line1.glyph = _UF_C                         ;same as movelist glyphs
# trial.line1.stateno = 
# trial.line1.anim =
#
# trial.line2.text = Crouching Forward              ;string
# trial.line2.glyph = _D_+^B                        ;same as movelist glyphs
# trial.line2.stateno = 
# trial.line2.anim =
#
# trial.line3.text = Fierce Hadoken                 ;string
# trial.line3.glyph = _QCF+^Z                       ;same as movelist glyphs
# trial.line3.stateno = 
# trial.line3.anim =

[Statedef 70731; type:S;movetype:I;physics :N;anim :-2;ctrl:0;velset:0,0;sprpriority:1;]

# get max trials from parent
if time = 1 {
	var(0):=helper(70730),var(0);
}

if time = 0 {
	# set current attack of trial list
	## Change this to pull value from trigger
	rootmapset{map:"T_list";value:1}

	#what trial attack am I index
	var(1):=root,numhelper(70731);

	#special var if exists 
	var(5):=-1;

	#anim var if it exists 
	var(7):=-1;

	#throw check
	var(8):=-1;

	#build trial text (change this)
	call L_T(const(size.height)+1,var(1),root,map(scale),-1,10,70,10,8.5,500);

	#set stateno requirement of attack
	var(2):=var(9+root,numhelper(70731));
}

#detect if designated attack is the one this trial item needs to be satisfied
ignorehitpause if root,stateno=var(2) && 
(root,hitpausetime>1&&root,movehit||enemynear,map(projhit)&&!enemynear,hitshakeover||var(8)>0 &&root,time=1)&& 
(root,map(SpVer)=var(5) || var(5)=-1) &&(root,anim=var(7)||var(7)=-1) && root,map(T_list)=var(1)  && !var(4)
{
	printtoconsole{text:"hit"}

	#darken text (change this)
	mapset{map:"pal";value:1}

	#attack has hit, cease check for the trial item 
	if !var(4) {
		var(6):=1;
		var(4):=1;
	}
}

#update root position on which attack they need to do next
if ((root,hitpausetime=1 && root,movehit) || enemynear,map(projhit)&&enemynear,gethitvar(hitshaketime)=1||var(8)>0 &&root,time=1) && root,map(T_list)=var(1) && var(6) {
	rootmapadd{map:"T_list";value:1}
}

#reset hit detection so next trial attack can be checked
if root,animelemtime(1)=1 && var(6) && stateno!=[0,120] && !root,movehit {
	printtoconsole{text:"reset state"}
	var(6):=0;
	var(4):=0;
}

#combo dropped
if root,combocount=0 && !root,numtarget {
	mapset{map:"pal";value:0}
	rootmapset{map:"T_list";value:1}
	var(4):=0;
	var(6):=0;
}

#reset hit detection for current trial item
if root,hitpausetime=0 && enemynear,gethitvar(hitshaketime)=0&& ( !enemynear,map(thrown)||!root,numtarget) && var(4) {
	var(4):=0;
}

#darken text (Change this)
if map(pal) {
	PalFx{
		time :2
		;add : -75,-75,-75
		;mul : 256,256,256
		;invertall : 0
		;color : 256
		}
}

displaytoclipboard{text:"var(0) %d %d %d %d";params:root,map(T_list),var(8),var(5),var(2)}

#if trial complete, die while next trial is bufferred
if root,map(T_list)>=var(0)+1 && var(0)!=0 || var(2)=0 || parent,var(4)=1 {
	parent,var(4):=1;

	removeexplod{id:1000201}
	if var(2)= var(9+root,numhelper(70731)) && root,numhelper(70731)=var(0) {
		mapadd{map:"currenttrial";value:1;redirectid:root,id}
		rootmapadd{map:"c_trial";value:1}
	}

	destroyself{}
}

#trial loader 
[Statedef 70730; type:S;movetype:I;physics :N;anim :-2;ctrl:0;velset:0,0;sprpriority:1;]
let ct = root,map(currenttrial);

#next trial can load
if numhelper(70731) = 0 {
	var(4):=0;
}

#generate all trial items once previous trial is unloaded
if numhelper(70731)<var(0)  && var(4)=0 {
	Helper{
		helpertype : normal
		;name : "trial"
		;ID :  70731
		;stateno : 70731
		;pos : 61,-37
		;postype : p1   
		;facing : 1
		;keyctrl : 0
		;ownpal : 1
		;size.xscale :1*const(size.xscale)
		;size.yscale :1*const(size.yscale)
		;size.height : $ct
		;size.ground.back:var(0)}
}

displaytoclipboard{text:"var(0) %d %d %d";params:root,map(currenttrial),var(0),var(4)}

[Statedef 70720; type:S;movetype:I;physics :N;anim :-2;ctrl:0;velset:0,0;sprpriority:1;]

if time = 0 && root,map(t_time)=0 {
	rootmapset{map:"t_time";value:356400}
}

call loadtimer(root,map(t_time),5,230,map(scale),500);

if root,map(fighting) && root,map(currenttrial)<10 {
	rootmapadd{map:"t_timer";value:1}
}

persistent(0) if root,map(currenttrial)=10 {
	pause{time:110;movetime:110}
	rootmapset{map:"t_time";value:root,map(t_timer)}
	Explod{anim:F178;id:176;scale:1*Map(scale),1*Map(scale);facing:cond(teamside=2,-1,1);bindtime:-1;postype:back;sprpriority:8;pos:160,120;pausemovetime:999}
}


#===============================================================================
#Global states (not halted by Pause/SuperPause, no helper limitations)
#===============================================================================
[Statedef -4]

if !Const(Default.Enable.Action) || TeamSide = 0 {
	#do nothing, global code disabled locally or executed by stage
} else if gameMode = "trials" {
    if time = 1 {
		MapSet{map: "_iksys_trialStateNo"; value: 0}
		MapSet{map: "_iksys_trialAnimNo"; value: 0}
		MapSet{map: "_iksys_rankHitOverriddenStateNo"; value: 0}
		MapSet{map: "_iksys_rankFirstAttackFlag"; value: 0}
		MapSet{map: "_iksys_rankComboCount"; value: 0}
		MapSet{map: "_iksys_rankWinFlag"; value: 0}
	} 

	# Increment trial 
	if command="d" && map(currenttrial)<10 && !ishelper {
		helper(70730),var(4):=1;
		mapadd{map:"currenttrial";value:1}

	# Decrement trial 
	if command="w" && map(currenttrial)>0&& !ishelper {
		helper(70730),var(4):=1;
		mapadd{map:"currenttrial";value:-1}
	}

	if !ishelper {
		mapset{map:"O_Sym";value:1}
		powerset{value:powermax}
	}

	if movetype!=H && time=1 && life < lifemax && !ishelper {
		lifeset{value:lifemax}
	}

	# Call trial loader here
	if  numhelper(70730)=0 && teamside=1 && !ishelper {
		Helper{
			helpertype : normal
			;name : "trial"
			;ID :  70730
			;stateno : 70730
			;pos : 61,-37
			;postype : p1   
			;facing : 1
			;keyctrl : 0
			;ownpal : 1
			;size.xscale :1*const(size.xscale)
			;size.yscale :1*const(size.yscale)
		}

		Helper{
			helpertype : normal
			;name : "time"
			;ID :  70720
			;stateno : 70720
			;pos : 61,-37
			;postype : p1   
			;facing : 1
			;keyctrl : 0
			;ownpal : 1
			;size.xscale :1*const(size.xscale)
			;size.yscale :1*const(size.yscale)
		}
	}
#end trials
}